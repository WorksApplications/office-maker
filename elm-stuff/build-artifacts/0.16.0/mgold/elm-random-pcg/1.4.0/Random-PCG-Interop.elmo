Elm.Random = Elm.Random || {};
Elm.Random.PCG = Elm.Random.PCG || {};
Elm.Random.PCG.Interop = Elm.Random.PCG.Interop || {};
Elm.Random.PCG.Interop.make = function (_elm) {
   "use strict";
   _elm.Random = _elm.Random || {};
   _elm.Random.PCG = _elm.Random.PCG || {};
   _elm.Random.PCG.Interop = _elm.Random.PCG.Interop || {};
   if (_elm.Random.PCG.Interop.values)
   return _elm.Random.PCG.Interop.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Random$PCG = Elm.Random.PCG.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var fission = function (stdSeed0) {
      var gen = A2($Random.$int,0,-1);
      var _p0 = A2($Random.generate,gen,stdSeed0);
      var a = _p0._0;
      var stdSeed1 = _p0._1;
      var _p1 = A2($Random.generate,gen,stdSeed1);
      var b = _p1._0;
      var stdSeed2 = _p1._1;
      var pcgSeed1 = A2($Random$PCG.initialSeed2,a,b);
      return {ctor: "_Tuple2",_0: pcgSeed1,_1: stdSeed2};
   };
   return _elm.Random.PCG.Interop.values = {_op: _op
                                           ,fission: fission};
};