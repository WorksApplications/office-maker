Elm.Set = Elm.Set || {};
Elm.Set.make = function (_elm) {
   "use strict";
   _elm.Set = _elm.Set || {};
   if (_elm.Set.values) return _elm.Set.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm);
   var _op = {};
   var foldr = F3(function (f,b,_p0) {
      var _p1 = _p0;
      return A3($Dict.foldr,
      F3(function (k,_p2,b) {    return A2(f,k,b);}),
      b,
      _p1._0);
   });
   var foldl = F3(function (f,b,_p3) {
      var _p4 = _p3;
      return A3($Dict.foldl,
      F3(function (k,_p5,b) {    return A2(f,k,b);}),
      b,
      _p4._0);
   });
   var toList = function (_p6) {
      var _p7 = _p6;
      return $Dict.keys(_p7._0);
   };
   var size = function (_p8) {
      var _p9 = _p8;
      return $Dict.size(_p9._0);
   };
   var member = F2(function (k,_p10) {
      var _p11 = _p10;
      return A2($Dict.member,k,_p11._0);
   });
   var isEmpty = function (_p12) {
      var _p13 = _p12;
      return $Dict.isEmpty(_p13._0);
   };
   var Set_elm_builtin = function (a) {
      return {ctor: "Set_elm_builtin",_0: a};
   };
   var empty = Set_elm_builtin($Dict.empty);
   var singleton = function (k) {
      return Set_elm_builtin(A2($Dict.singleton,
      k,
      {ctor: "_Tuple0"}));
   };
   var insert = F2(function (k,_p14) {
      var _p15 = _p14;
      return Set_elm_builtin(A3($Dict.insert,
      k,
      {ctor: "_Tuple0"},
      _p15._0));
   });
   var fromList = function (xs) {
      return A3($List.foldl,insert,empty,xs);
   };
   var map = F2(function (f,s) {
      return fromList(A2($List.map,f,toList(s)));
   });
   var remove = F2(function (k,_p16) {
      var _p17 = _p16;
      return Set_elm_builtin(A2($Dict.remove,k,_p17._0));
   });
   var union = F2(function (_p19,_p18) {
      var _p20 = _p19;
      var _p21 = _p18;
      return Set_elm_builtin(A2($Dict.union,_p20._0,_p21._0));
   });
   var intersect = F2(function (_p23,_p22) {
      var _p24 = _p23;
      var _p25 = _p22;
      return Set_elm_builtin(A2($Dict.intersect,_p24._0,_p25._0));
   });
   var diff = F2(function (_p27,_p26) {
      var _p28 = _p27;
      var _p29 = _p26;
      return Set_elm_builtin(A2($Dict.diff,_p28._0,_p29._0));
   });
   var filter = F2(function (p,_p30) {
      var _p31 = _p30;
      return Set_elm_builtin(A2($Dict.filter,
      F2(function (k,_p32) {    return p(k);}),
      _p31._0));
   });
   var partition = F2(function (p,_p33) {
      var _p34 = _p33;
      var _p35 = A2($Dict.partition,
      F2(function (k,_p36) {    return p(k);}),
      _p34._0);
      var p1 = _p35._0;
      var p2 = _p35._1;
      return {ctor: "_Tuple2"
             ,_0: Set_elm_builtin(p1)
             ,_1: Set_elm_builtin(p2)};
   });
   return _elm.Set.values = {_op: _op
                            ,empty: empty
                            ,singleton: singleton
                            ,insert: insert
                            ,remove: remove
                            ,isEmpty: isEmpty
                            ,member: member
                            ,size: size
                            ,foldl: foldl
                            ,foldr: foldr
                            ,map: map
                            ,filter: filter
                            ,partition: partition
                            ,union: union
                            ,intersect: intersect
                            ,diff: diff
                            ,toList: toList
                            ,fromList: fromList};
};