Elm.ListUtil = Elm.ListUtil || {};
Elm.ListUtil.make = function (_elm) {
   "use strict";
   _elm.ListUtil = _elm.ListUtil || {};
   if (_elm.ListUtil.values) return _elm.ListUtil.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $List$Extra = Elm.List.Extra.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var getAt = F2(function (index,list) {
      return A2($List$Extra.getAt,list,index);
   });
   var zipWithIndexFrom = F2(function (index,list) {
      var _p0 = list;
      if (_p0.ctor === "::") {
            return A2($List._op["::"],
            {ctor: "_Tuple2",_0: _p0._0,_1: index},
            A2(zipWithIndexFrom,index + 1,_p0._1));
         } else {
            return _U.list([]);
         }
   });
   var zipWithIndex = zipWithIndexFrom(0);
   var findBy = F2(function (f,list) {
      return $List.head(A2($List.filter,f,list));
   });
   return _elm.ListUtil.values = {_op: _op
                                 ,findBy: findBy
                                 ,zipWithIndex: zipWithIndex
                                 ,zipWithIndexFrom: zipWithIndexFrom
                                 ,getAt: getAt};
};