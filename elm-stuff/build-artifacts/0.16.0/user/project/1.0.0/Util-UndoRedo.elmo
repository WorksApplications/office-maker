Elm.Util = Elm.Util || {};
Elm.Util.UndoRedo = Elm.Util.UndoRedo || {};
Elm.Util.UndoRedo.make = function (_elm) {
   "use strict";
   _elm.Util = _elm.Util || {};
   _elm.Util.UndoRedo = _elm.Util.UndoRedo || {};
   if (_elm.Util.UndoRedo.values) return _elm.Util.UndoRedo.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var replay = F3(function (update,commitsAsc,original) {
      return A3($List.foldl,update,original,commitsAsc);
   });
   var commitsUntil = F2(function (cursor,commits) {
      return A2($List.drop,cursor,commits);
   });
   var canRedo = function (model) {
      return _U.cmp(model.cursor,0) > 0;
   };
   var canUndo = function (model) {
      return $Basics.not($List.isEmpty(A2(commitsUntil,
      model.cursor,
      model.commits)));
   };
   var dataAt = F2(function (cursor,model) {
      return A3(replay,
      model.update,
      $List.reverse(A2(commitsUntil,cursor,model.commits)),
      model.original);
   });
   var data = function (model) {    return model.cursorDataCache;};
   var updateByCursorShift = F2(function (cursor,model) {
      return _U.update(model,
      {cursor: cursor,cursorDataCache: A2(dataAt,cursor,model)});
   });
   var commit = F2(function (model,commit) {
      var model$ = _U.update(model,
      {commits: A2($List._op["::"],
      commit,
      A2($List.drop,model.cursor,model.commits))});
      return A2(updateByCursorShift,0,model$);
   });
   var redo = function (model) {
      return canRedo(model) ? A2(updateByCursorShift,
      model.cursor - 1,
      model) : model;
   };
   var undo = function (model) {
      return canUndo(model) ? A2(updateByCursorShift,
      model.cursor + 1,
      model) : model;
   };
   var init = function (_p0) {
      var _p1 = _p0;
      var _p2 = _p1.data;
      return {cursor: 0
             ,original: _p2
             ,commits: _U.list([])
             ,update: _p1.update
             ,cursorDataCache: _p2};
   };
   var Model = F5(function (a,b,c,d,e) {
      return {cursor: a
             ,original: b
             ,commits: c
             ,update: d
             ,cursorDataCache: e};
   });
   return _elm.Util.UndoRedo.values = {_op: _op
                                      ,init: init
                                      ,undo: undo
                                      ,redo: redo
                                      ,commit: commit
                                      ,canUndo: canUndo
                                      ,canRedo: canRedo
                                      ,data: data
                                      ,Model: Model};
};