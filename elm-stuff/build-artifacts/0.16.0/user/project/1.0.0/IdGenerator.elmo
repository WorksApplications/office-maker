Elm.IdGenerator = Elm.IdGenerator || {};
Elm.IdGenerator.make = function (_elm) {
   "use strict";
   _elm.IdGenerator = _elm.IdGenerator || {};
   if (_elm.IdGenerator.values) return _elm.IdGenerator.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var Seed = function (a) {    return {ctor: "Seed",_0: a};};
   var init = Seed(100);
   var $new = function (_p0) {
      var _p1 = _p0;
      var _p2 = _p1._0;
      return {ctor: "_Tuple2"
             ,_0: $Basics.toString(_p2)
             ,_1: Seed(_p2 + 1)};
   };
   var zipWithNewIds = F2(function (seed,list) {
      return A3($List.foldr,
      F2(function (a,_p3) {
         var _p4 = _p3;
         var _p5 = $new(_p4._1);
         var newId = _p5._0;
         var newSeed = _p5._1;
         return {ctor: "_Tuple2"
                ,_0: A2($List._op["::"],
                {ctor: "_Tuple2",_0: a,_1: newId},
                _p4._0)
                ,_1: newSeed};
      }),
      {ctor: "_Tuple2",_0: _U.list([]),_1: seed},
      list);
   });
   return _elm.IdGenerator.values = {_op: _op
                                    ,Seed: Seed
                                    ,init: init
                                    ,$new: $new
                                    ,zipWithNewIds: zipWithNewIds};
};