Elm.Util = Elm.Util || {};
Elm.Util.IdGenerator = Elm.Util.IdGenerator || {};
Elm.Util.IdGenerator.make = function (_elm) {
   "use strict";
   _elm.Util = _elm.Util || {};
   _elm.Util.IdGenerator = _elm.Util.IdGenerator || {};
   if (_elm.Util.IdGenerator.values)
   return _elm.Util.IdGenerator.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random$PCG = Elm.Random.PCG.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Uuid = Elm.Uuid.make(_elm);
   var _op = {};
   var Seed = function (a) {    return {ctor: "Seed",_0: a};};
   var init = function (randomSeed) {
      return Seed(A2($Basics.uncurry,
      $Random$PCG.initialSeed2,
      randomSeed));
   };
   var $new = function (_p0) {
      var _p1 = _p0;
      var _p2 = A2($Random$PCG.generate,$Uuid.uuidGenerator,_p1._0);
      var newUuid = _p2._0;
      var newSeed = _p2._1;
      return {ctor: "_Tuple2"
             ,_0: $Uuid.toString(newUuid)
             ,_1: Seed(newSeed)};
   };
   var zipWithNewIds = F2(function (seed,list) {
      return A3($List.foldr,
      F2(function (a,_p3) {
         var _p4 = _p3;
         var _p5 = $new(_p4._1);
         var newId = _p5._0;
         var newSeed = _p5._1;
         return {ctor: "_Tuple2"
                ,_0: A2($List._op["::"],
                {ctor: "_Tuple2",_0: a,_1: newId},
                _p4._0)
                ,_1: newSeed};
      }),
      {ctor: "_Tuple2",_0: _U.list([]),_1: seed},
      list);
   });
   return _elm.Util.IdGenerator.values = {_op: _op
                                         ,Seed: Seed
                                         ,init: init
                                         ,$new: $new
                                         ,zipWithNewIds: zipWithNewIds};
};