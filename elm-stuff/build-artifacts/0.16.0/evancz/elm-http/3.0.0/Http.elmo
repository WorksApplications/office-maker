Elm.Http = Elm.Http || {};
Elm.Http.make = function (_elm) {
   "use strict";
   _elm.Http = _elm.Http || {};
   if (_elm.Http.values) return _elm.Http.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$Http = Elm.Native.Http.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var send = $Native$Http.send;
   var BadResponse = F2(function (a,b) {
      return {ctor: "BadResponse",_0: a,_1: b};
   });
   var UnexpectedPayload = function (a) {
      return {ctor: "UnexpectedPayload",_0: a};
   };
   var handleResponse = F2(function (handle,response) {
      if (_U.cmp(200,
      response.status) < 1 && _U.cmp(response.status,300) < 0) {
            var _p0 = response.value;
            if (_p0.ctor === "Text") {
                  return handle(_p0._0);
               } else {
                  return $Task.fail(UnexpectedPayload("Response body is a blob, expecting a string."));
               }
         } else return $Task.fail(A2(BadResponse,
         response.status,
         response.statusText));
   });
   var NetworkError = {ctor: "NetworkError"};
   var Timeout = {ctor: "Timeout"};
   var promoteError = function (rawError) {
      var _p1 = rawError;
      if (_p1.ctor === "RawTimeout") {
            return Timeout;
         } else {
            return NetworkError;
         }
   };
   var fromJson = F2(function (decoder,response) {
      var decode = function (str) {
         var _p2 = A2($Json$Decode.decodeString,decoder,str);
         if (_p2.ctor === "Ok") {
               return $Task.succeed(_p2._0);
            } else {
               return $Task.fail(UnexpectedPayload(_p2._0));
            }
      };
      return A2($Task.andThen,
      A2($Task.mapError,promoteError,response),
      handleResponse(decode));
   });
   var RawNetworkError = {ctor: "RawNetworkError"};
   var RawTimeout = {ctor: "RawTimeout"};
   var Blob = function (a) {    return {ctor: "Blob",_0: a};};
   var Text = function (a) {    return {ctor: "Text",_0: a};};
   var Response = F5(function (a,b,c,d,e) {
      return {status: a,statusText: b,headers: c,url: d,value: e};
   });
   var defaultSettings = {timeout: 0
                         ,onStart: $Maybe.Nothing
                         ,onProgress: $Maybe.Nothing
                         ,desiredResponseType: $Maybe.Nothing
                         ,withCredentials: false};
   var post = F3(function (decoder,url,body) {
      var request = {verb: "POST"
                    ,headers: _U.list([])
                    ,url: url
                    ,body: body};
      return A2(fromJson,decoder,A2(send,defaultSettings,request));
   });
   var Settings = F5(function (a,b,c,d,e) {
      return {timeout: a
             ,onStart: b
             ,onProgress: c
             ,desiredResponseType: d
             ,withCredentials: e};
   });
   var multipart = $Native$Http.multipart;
   var FileData = F3(function (a,b,c) {
      return {ctor: "FileData",_0: a,_1: b,_2: c};
   });
   var BlobData = F3(function (a,b,c) {
      return {ctor: "BlobData",_0: a,_1: b,_2: c};
   });
   var blobData = BlobData;
   var StringData = F2(function (a,b) {
      return {ctor: "StringData",_0: a,_1: b};
   });
   var stringData = StringData;
   var BodyBlob = function (a) {
      return {ctor: "BodyBlob",_0: a};
   };
   var BodyFormData = {ctor: "BodyFormData"};
   var ArrayBuffer = {ctor: "ArrayBuffer"};
   var BodyString = function (a) {
      return {ctor: "BodyString",_0: a};
   };
   var string = BodyString;
   var Empty = {ctor: "Empty"};
   var empty = Empty;
   var getString = function (url) {
      var request = {verb: "GET"
                    ,headers: _U.list([])
                    ,url: url
                    ,body: empty};
      return A2($Task.andThen,
      A2($Task.mapError,
      promoteError,
      A2(send,defaultSettings,request)),
      handleResponse($Task.succeed));
   };
   var get = F2(function (decoder,url) {
      var request = {verb: "GET"
                    ,headers: _U.list([])
                    ,url: url
                    ,body: empty};
      return A2(fromJson,decoder,A2(send,defaultSettings,request));
   });
   var Request = F4(function (a,b,c,d) {
      return {verb: a,headers: b,url: c,body: d};
   });
   var uriDecode = $Native$Http.uriDecode;
   var uriEncode = $Native$Http.uriEncode;
   var queryEscape = function (string) {
      return A2($String.join,
      "+",
      A2($String.split,"%20",uriEncode(string)));
   };
   var queryPair = function (_p3) {
      var _p4 = _p3;
      return A2($Basics._op["++"],
      queryEscape(_p4._0),
      A2($Basics._op["++"],"=",queryEscape(_p4._1)));
   };
   var url = F2(function (baseUrl,args) {
      var _p5 = args;
      if (_p5.ctor === "[]") {
            return baseUrl;
         } else {
            return A2($Basics._op["++"],
            baseUrl,
            A2($Basics._op["++"],
            "?",
            A2($String.join,"&",A2($List.map,queryPair,args))));
         }
   });
   var TODO_implement_file_in_another_library = {ctor: "TODO_implement_file_in_another_library"};
   var TODO_implement_blob_in_another_library = {ctor: "TODO_implement_blob_in_another_library"};
   return _elm.Http.values = {_op: _op
                             ,getString: getString
                             ,get: get
                             ,post: post
                             ,send: send
                             ,url: url
                             ,uriEncode: uriEncode
                             ,uriDecode: uriDecode
                             ,empty: empty
                             ,string: string
                             ,multipart: multipart
                             ,stringData: stringData
                             ,defaultSettings: defaultSettings
                             ,fromJson: fromJson
                             ,Request: Request
                             ,Settings: Settings
                             ,Response: Response
                             ,Text: Text
                             ,Blob: Blob
                             ,Timeout: Timeout
                             ,NetworkError: NetworkError
                             ,UnexpectedPayload: UnexpectedPayload
                             ,BadResponse: BadResponse
                             ,RawTimeout: RawTimeout
                             ,RawNetworkError: RawNetworkError};
};