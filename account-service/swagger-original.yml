swagger: '2.0'

info:
  version: '1.2-SNAPSHOT'
  title: 'Accounts'
  description: |
    ユーザと Role を管理し、 RFC 7235 の Authorization ヘッダと RFC 5741 の [JSON Web Token](https://jwt.io/)
    によって署名されたクライアントサイドセッションを利用した認証機構を提供します。
    Authorization ヘッダの `auth-scheme` の値としては `Bearer` を利用します
    （旧実装の `JWT` は 2.0 で削除されます）。
    トークンは、サーバ側で管理する鍵で署名することによって生成されます。
    API 呼出の際、サーバではユーザ ID や Role を復元し、署名を確認することで有効性を確認します。

    Role は以下の値が有効です。

    - ADMIN
    - GENERAL

    Accounts で管理する Role は、独自の権限管理機構を持たないサービスのデフォルトの設定として動作します。

    また、本サービスは OAuth2 (RFC 6749) の Implicit Flow による認可機構を提供します提供します。
    `clients` リソースは、システム全体の連携可能なサービスです。
    `authorize` に追加されたサービスは、リフレッシュトークンによって認可状態を継続することができます。

schemes:
  - 'http'
host: walter.internal.worksap.com
basePath: '/walter/accounts/api/1'

tags:
  - name: "v1.0"
  - name: "v1.1"
  - name: "v1.2"

paths:
  /authentication:
    post:
      tags:
        - "v1.0"
      description: |
        認証を行います。
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - userId
              - password
            properties:
              userId:
                type: string
              password:
                type: string
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              accessToken:
                type: string
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
  '/reset-password':
    put:
      tags:
        - "v1.0"
      description: |
        パスワードを再設定します。 `resetToken` は `POST /users/{userId}/password` から発行します。
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - resetToken
              - newPassword
            properties:
              resetToken:
                type: string
              newPassword:
                type: string
      responses:
        200:
          description: Successful response
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
  /users:
    post:
      tags:
        - "v1.0"
      description: |
        ユーザを追加します。

        このユーザは、作成者と同じドメインに属します。
      parameters:
        - "$ref": "#/parameters/Authorization"
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - userId
              - password
              - role
            properties:
              userId:
                type: string
              password:
                type: string
              role:
                $ref: '#/definitions/Role'
      responses:
        200:
          description: Successful response
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
        403:
          description: |
            `ADMIN` のみ追加できます。
            また、事前に登録されたドメインとは異なるユーザ ID の場合もエラーとなります。
          schema:
            $ref: '#/definitions/Error'
        409:
          description: テナント内にすでにユーザIDが存在します。
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - "v1.0"
      description: |
        同一テナント内のユーザ一覧を取得します。

        結果に含まれる `total` プロパティは、
        あまり利用されないにもかかわらずパフォーマンスに影響を与えるため、
        次期メジャーバージョンアップで廃止される予定です。
      parameters:
        - "$ref": "#/parameters/Authorization"
        - name: startsWith
          description: |
            User ID の接頭辞によってフィルタリングします
          in: query
          type: string
        - name: role
          description: |
            Role によってフィルタリングします。
          in: query
          type: string
        - name: limit
          in: query
          type: number
        - name: exclusiveStartKey
          in: query
          type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  $ref: '#/definitions/User'
              total:
                type: number
              lastEvaluatedKey:
                type: string
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
  /users/{userId}:
    get:
      tags:
        - "v1.0"
      description: ユーザを取得します。
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - "$ref": "#/parameters/Authorization"
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/User'
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
        404:
          description: |
            Not Found

            たとえ他のドメインにユーザが存在していても、サーバは 404 によってその存在を隠す必要があります。
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - "v1.0"
      description: 同一テナントのユーザを削除します。
      parameters:
        - "$ref": "#/parameters/Authorization"
        - name: userId
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
        403:
          description: '`ADMIN` のみ削除できます。'
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found

            たとえ他のドメインにユーザが存在していても、サーバは 404 によってその存在を隠す必要があります。
          schema:
            $ref: '#/definitions/Error'
  '/users/{userId}/mail-confirm':
    post:
      tags:
        - "v1.0"
      description: '`userId` をメールアドレスとしての確認するためのメールを送信します。'
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - "$ref": "#/parameters/Authorization"
      responses:
        200:
          description: |
            確認のメールを送信します。
            メールに付与されたアドレスには、クエリパラメータでリセットトークンが付与されます。
            このトークンは、 `PUT /users/{userId}/mail-confirm` に利用します。
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
        403:
          description: '本人のみが送信できます。'
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - "v1.0"
      description: |
        メールアドレスを確認します。
        これ以降、このメールアドレスによってパスワードの初期化を安全に行うことができるようになります。
        確認されていない誤ったメールアドレスに初期化トークンが発行されると、乗っ取りが発生します。
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: confirmToken
          description: |
            確認用のトークンです。このトークンに関連づけられたメールアドレスが確認済になります。
          in: query
          required: true
          type: string
        - "$ref": "#/parameters/Authorization"
      responses:
        200:
          description: OK
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
  /users/{userId}/password:
    post:
      tags:
        - "v1.0"
      description: |
        パスワードを再設定のメールを送信します。
      parameters:
        - name: userId
          in: path
          required: true
          type: string
      responses:
        200:
          description: |
            メールが送信されます。

            メールに付与されたアドレスには、クエリパラメータでリセットトークンが付与されます。
            このトークンは、 `PUT /users/{userId}/password` に利用します。
        400:
          "$ref": "#/responses/BadRequest"
        404:
          description: Not Found
    put:
      tags:
        - "v1.0"
      description: パスワードを更新します。
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - oldPassword
              - newPassword
            properties:
              oldPassword:
                type: string
              newPassword:
                type: string
      responses:
        200:
          description: Successful response
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
  '/users/{userId}/role':
    get:
      "deprecated": true
      tags:
        - "v1.0"
      description: |
        ユーザのロールを取得します。

        非推奨です。 `GET /users/{userId}` を利用してください。
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - "$ref": "#/parameters/Authorization"
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Role'
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
        404:
          description: |
            Not Found

            たとえ他のドメインにユーザが存在していても、サーバは 404 によってその存在を隠す必要があります。
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - "v1.0"
      description: ロールを変更します。
      parameters:
        - name: userId
          in: path
          required: true
          type: string
        - "$ref": "#/parameters/Authorization"
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Role'
      responses:
        200:
          description: Successful response
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
        403:
          description: '`ADMIN` のみ変更できます。'
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found

            たとえ他のドメインにユーザが存在していても、サーバは 404 によってその存在を隠す必要があります。
          schema:
            $ref: '#/definitions/Error'
  "/clients":
    post:
      tags:
        - "v1.1"
      description: 外部連携可能なサービスを追加します。
      parameters:
        - "$ref": "#/parameters/Authorization"
        - name: body
          in: body
          schema:
            type: object
            required:
              - name
              - redirectUrl
            properties:
              name:
                type: string
              description:
                type: string
              redirectUrl:
                type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              clientId:
                type: string
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
    get:
      tags:
        - "v1.1"
      description: |
        外部連携可能なサービスの一覧を取得します。
      parameters:
        - "$ref": "#/parameters/Authorization"
        - name: limit
          in: query
          type: string
        - name: exclusiveStartKey
          in: query
          type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              total:
                type: number
              lastEvaluatedKey:
                type: string
              clients:
                type: array
                items:
                  $ref: "#/definitions/Client"
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
  "/clients/{clientId}":
    get:
      tags:
        - "v1.1"
      description: そのテナントが管理する外部連携可能なサービスを取得します。
      parameters:
        - "$ref": "#/parameters/Authorization"
        - name: clientId
          type: string
          in: path
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Client"
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
    delete:
      tags:
        - "v1.1"
      description: そのテナントが管理する外部連携可能なサービスを削除します。
      parameters:
        - "$ref": "#/parameters/Authorization"
        - name: clientId
          type: string
          in: path
          required: true
      responses:
        200:
          description: OK
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
        403:
          description: ADMIN もしくは自身が追加したクライアントのみを削除できます。
  "/users/{userId}/authorize/{clientId}":
    put:
      tags:
        - "v1.1"
      description: アプリケーションを認可します。
      parameters:
        - "$ref": "#/parameters/Authorization"
        - name: userId
          in: path
          required: true
          type: string
        - name: clientId
          type: string
          in: path
          required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              code:
                type: string
                description: Authorization Code Flow で利用します。
              accessToken:
                type: string
                description: |
                  この `accessToken` には `aud=clientId` となるようなクレームが追加され、
                  アクセス元のクライアントを確認できます。
              expiresIn:
                  type: number
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
  /ip:
    get:
      tags:
        - "v1.2"
      description: |
        このサービスにアクセスできる IP アドレスの一覧を取得します。
        匿名によるアクセスは、このアドレスによってテナントのドメインを特定します。

        ブラウザによる匿名のアクセスは、 IP アドレスの他に Origin ヘッダによっても制限されます。
        `trusted-origin` リソースについても確認してください。
      parameters:
        - "$ref": "#/parameters/Authorization_opt"
        - "$ref": "#/parameters/X-Forwarded-For"
      responses:
        200:
          description: ""
          schema:
            type: array
            items:
              type: object
              properties:
                ipAddress:
                  type: string
                comment:
                  type: string
        401:
          "$ref": "#/responses/Unauthorized"
    put:
      tags:
        - "v1.2"
      description: |
        アクセス元の IP アドレスを追加・更新します。
        追加された IP アドレスからは、テナント内の匿名ユーザとして一部の機能を利用できるようになります。

        ユーザ組織の一覧作成を防ぐため、 Web 経由では呼び出し元の IP アドレスのみが登録できます。
        また、他の組織とネットワークを共有している場合は、情報流出につながりますので利用しないでください。
      parameters:
        - "$ref": "#/parameters/Authorization"
        - name: X-Forwarded-For
          description: 呼び出し元の IP アドレスを登録します。
          in: header
          required: true
          type: string
        - name: Body
          in: body
          required: false
          schema:
            type: object
            properties:
              comment:
                type: string
      responses:
        200:
          description: |
            OK

            変更は運用方法に応じた Pub/Sub を通じて、他のサービスへ通知されます。
            Pub/Sub についての詳細は、 Usage を確認して下さい。
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
        403:
          description: |
            `ADMIN` のみ追加できます。
  /ip/{ipAddress}:
    delete:
      tags:
        - "v1.2"
      description: |
        このサービスにアクセスできる IP アドレスを削除します。
      parameters:
        - name: ipAddress
          description: ""
          in: path
          type: string
          required: true
        - "$ref": "#/parameters/Authorization"
      responses:
        200:
          description: ""
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
        404:
          description: |
            Not Found

            たとえ他のドメインに存在していても、サーバは 404 によってその存在を隠す必要があります。
          schema:
            $ref: '#/definitions/Error'
  '/trusted-origin':
    get:
      tags:
        - "v1.2"
      description: |
        このサービスにアクセスできるオリジンの一覧を取得します。

        ブラウザによる匿名のアクセスは、 IP アドレスの他に Origin ヘッダによっても制限されます。
        この制約によって、ユーザが不正なサイトにアクセスした場合でも、匿名のアクセスから情報が流出することを防ぐことができます。

        `Origin` ヘッダが存在する場合、このリソースに含まれる値、もしくはローカルホストを指す場合にアクセスが許可されます。
        `Origin` ヘッダが存在しない場合は、ブラウザ以外からのアクセスと見なして許可されます（したがって古いブラウザは利用しないで下さい）。
      parameters:
        - "$ref": "#/parameters/Authorization_opt"
        - "$ref": "#/parameters/X-Forwarded-For"
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              type: object
              properties:
                origin:
                  type: string
                comment:
                  type: string
  '/trusted-origin/{schema}/{host}':
    put:
      tags:
        - "v1.2"
      description: |
        `trusted-origin` を追加・更新します。
      parameters:
        - name: schema
          required: true
          in: path
          type: string
        - name: host
          required: true
          in: path
          type: string
        - name: Body
          in: body
          schema:
            type: object
            properties:
              comment:
                type: string
      responses:
        200:
          description: OK
    delete:
      tags:
        - "v1.2"
      description: |
        `trusted-origin` を削除します。
      parameters:
        - name: schema
          required: true
          in: path
          type: string
        - name: host
          required: true
          in: path
          type: string
      responses:
        200:
          description: OK

  '/authentication-notice':
    get:
      tags:
        - "v1.2"
      description: |
        サインイン前の管理者からのメッセージを取得します。
      parameters:
        - "$ref": "#/parameters/Authorization_opt"
        - "$ref": "#/parameters/X-Forwarded-For"
      responses:
        200:
          description: ""
          schema:
            type: object
            properties:
              message:
                type: string
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
    put:
      tags:
        - "v1.2"
      description: |
        サインイン前の管理者からのメッセージを設定できます。
      parameters:
        - "$ref": "#/parameters/Authorization"
        - name: body
          description: ""
          in: body
          schema:
            type: object
            properties:
              message:
                type: string
      responses:
        200:
          description: ""
        400:
          "$ref": "#/responses/BadRequest"
        401:
          "$ref": "#/responses/Unauthorized"
        403:
          description: |
            `ADMIN` のみ変更できます。
definitions:
  Role:
    type: string
    pattern: '(GENERAL)|(ADMIN)'
  User:
    type: object
    properties:
      userId:
        type: string
      role:
        $ref: '#/definitions/Role'
      mailVerified:
        type: boolean
      lastAuthenticated:
        description: |
          前回認証した時刻。もしユーザの意図しない時刻が得られた場合、不正ログインが疑われます。
        type: string
        format: date-time
  Client:
    type: object
    properties:
      clientId:
        type: string
      name:
        type: string
      description:
        type: string
      redirectUrl:
        type: string
  Error:
    type: object
    properties:
      message:
        type: string
parameters:
  Authorization:
    name: Authorization
    description: |
      認証情報です。 Accounts サービスから取得したトークンを `Bearer {TOKEN}` の形式で送信します。
    in: header
    required: true
    type: string
  Authorization_opt:
    name: Authorization
    description: |
      認証情報です。 Accounts サービスから取得したトークンを `Bearer {TOKEN}` の形式で送信します。
    in: header
    required: false
    type: string
  X-Forwarded-For:
    name: X-Forwarded-For
    description: この API は、 IP アドレスによる匿名によるアクセスが可能です。
    in: header
    required: false
    type: string
responses:
  BadRequest:
    description: |
      Bad Request

      与えられたリクエストが不正な場合に発生します。
    schema:
      "$ref": "#/definitions/Error"
  Unauthorized:
    description: |
      Unauthorized

      アクセスしたユーザの特定に失敗した場合に発生します。
    schema:
      "$ref": "#/definitions/Error"
